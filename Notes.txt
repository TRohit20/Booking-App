Go was developed by Google in 2007 
It was open-sourced in 2009
 Why was created?
 Why is it created and why is it better?
 Go or also called "Golang"
Infrastructure changed a lot
   - Scalable & Distributed
   - Dynamic
   - More Capacity
Existing Programming Languages did not fully take advantage of it

With in improvements it was possible to write apps that would execute tasks in parallel
Multi-threading concept. It makes apps fast and simple but also comes with it's own set of issues
For example, Concurrency:
Concurrency is about dealing with lots of things at once
 Developers need to write code to prevent conflicts
     when tasks run in parallel,accessing shared data. 
     Examples: Google docs(Editing same doc by two users) or Ticket booking where two people wanna book the last ticket
Programming langs either have built in or Non builtin Concurrency mechanisms but the code is complex
Expensive and slow.
This is where GO outshines. Go is designed to run on multiple cores and built to support Concurrency
It is also cheap and easy in GO.
So, Some main Use cases of GO would be:
To write applications that need to be performant
And will run on modern scaled and distributed Infrastructure or systems with 100s of servers typically on cloud platform.

Charactteristics of GO:
The Language attempts to combine the best of two worlds by using simple and easy to write/read syntaxes like in python and the efficiency and safety of low-level static lang like C++.
Go is mostly used on Server or Backend side(Web,Microservices or DB services)
Many cloud technologies or technologies that run on modern cloud environments are written in Go. Example: Docker or Kubernetes or Vault 
Simple syntax, so easy to read and maintain over time
Go apps can be built very fast,start up and run.
It is also Resource Efficient. Requires fewer resources
It is also a Compile Language. i.e Compiles quickly into a single binary code and deploy and run it on any platform or OS easily in a consistent way. Same binary across any platform

Due to all this simplicity and speed, GO is becoming popular to write automation app or CLO for devops or SRE.

Running the Go Program:
First, we need to create a Go.mod file that is making it a project
In GO, everything works in Packages. 

Working with slices is much efficient and better as it is dynamic 
Another way to declare Slice can be 
*var ref_var = []data_type{} *
or 
* ref_var := []data_type{}
We dont have to keep track of the indices too. We just use the Append function which is in-built
Adding or updating values to slices is different but the semantics or syntax of retrieving the value is same as array

In reality, We have a web application where multiple users use it concurrently:
So, we create a constant loop so the app keeps asking for function like bookign the ticket 
Loop is used whenever you need something multiple times
Loops in Golang are very simplified
You only have 1 loop:
For-loop of differnet types which can be used for different cases

*** RANGE is a function in-built that allows us to iterate over any data structure 
For arrays and slices, it provides or gives back the value of Index and element in it

Feilds is a In-built function from the strings package and it splits a string using a spacer into a array. So we can access the elements using indices

***In Go, We can use underscroll _ to ignore a variable you dont want to use

Conditional statements like IF else are used to break loops or check things

Similar to conditional statements, we have **Switch** statements

** Continue ** is used to make the loop skip the remainder of the body and immediately retest its condition

*** USER INPUT VALIDATION 
It is must in order to make sure the app handles any bad user input or to make sure the app doesnt crash due to wrong inputs
so we need to verify the piece of data user provides

To write clean and reusable code, we use Functions
The process framework of encapsulating code or snippets of code that perform a certain action/function into their own container
Similar to variable, we need to give functions a descriptive name to access it or call it.
Func keyword is used to create them 
they reduce code duplication
can be called any no of times you want 
It will only execute when called
Function can be created with Parameters, where parameters are given in the brackets and given as input 
In GO, You can return MULTIPLE number of values from a single function. 

Make code cleaner using Packages:
***Package level variables:
These are the type of variables commonly shared among multiple functions 

So, creating variables in such a place that it is accessible for both main functions and other functions.
These are variables that are defined or declared at the top, outside of all functions
Defining them on a package level
--> Package level variables cannot be created using ":=", they need to be declared with var or const 

Best Practise though is to create local variables which are accessible only by the function or scope of it.

Above, we just used functions to encapsulate logic and make the code cleaner and nicer
--> More use cases of functions:
cleaner code
Grouping of logic 
Reusing of code to prevent duplication 